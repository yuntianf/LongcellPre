./annotation.R:#' @details Exons annotated in gtf will be split into non-overlapping parts and saved in gene bed annotation
./annotation.R:  gene_name = sapply(strsplit(temp[,"gene"],split = ".",fixed = TRUE),function(x) x[1])
./annotation.R:  gene_name = sapply(strsplit(gtf_data$gene,split = ".",fixed = TRUE),function(x) x[1])
./auxiliary.R:#' @param split The character to seperate the exon in the isoform
./auxiliary.R:iso_len = function(iso,sep = ",", split = "|"){
./auxiliary.R:  sites = as.numeric(unlist(strsplit(iso,split = ",|\\|")))
./barcodeMatch.R:#' Large data will be split according to cores.
./barcodeMatch.R:  seq_split <- dataSplit(seq,cores)
./barcodeMatch.R:  bm = future_lapply(seq_split,function(x){
./exon_corres.R:#' @param split The character to split the exons in the isoform
./exon_corres.R:#' @param sep The character to split the start and end position for each exon in the isoform.
./exon_corres.R:                        split = "|",sep = ","){
./exon_corres.R:                                      split,sep)
./exon_corres.R:                        split = "|",sep = ","){
./exon_corres.R:                                           split = split,sep = sep)
./exon_corres.R:#' @param split The character to split the exons in the isoform
./exon_corres.R:#' @param sep The character to split the start and end position for each exon in the isoform.
./exon_corres.R:bins2iso= function(start,end,sep = ",",split = "|"){
./exon_corres.R:  iso = paste(bins,collapse = split)
./exon_corres.R:                                         sep = ",",split = "|"),.groups = "drop")
./parallel.R:#' @return A list including split dataframe
./parallel.R:  data_split = lapply(gene_list,function(x){
./parallel.R:  return(data_split)
./parallel.R:#' @return A list including split dataframe or vector
./parallel.R:  num_splits <- cores
./parallel.R:    group_size = ceiling(length(data)/num_splits)
./parallel.R:    data_split = split(data,rep(1:num_splits, each = group_size, length.out = length(data)))
./parallel.R:    group_size = ceiling(nrow(data)/num_splits)
./parallel.R:    data_split <- split(data, rep(1:num_splits, each = group_size, length.out = nrow(data)))
./parallel.R:  return(data_split)
./pipeline.R:                            sim_thresh = NULL, split = "|",sep = ",",
./pipeline.R:  data_split = genes_distribute(data,cores,gene)
./pipeline.R:    count = future_lapply(data_split,function(x){
./pipeline.R:                            split = split,sep = sep,
./pipeline.R:                                               split = split,sep = sep)
./reads_filter.R:#' @param split The character to split each exon in the isoform representation
./reads_filter.R:#' @param sep The character to split the start and end for each exon in the isoform representation
./reads_filter.R:                            split = "|",sep = ","){
./reads_filter.R:                   thresh = thresh,split = split,sep = sep)
./splice_site_correct.R:#' @param split The character to seperate different exons in the isoform representation.
./splice_site_correct.R:                              split = "|",sep = ",",
./splice_site_correct.R:  out = splice_site_table_cpp(isoforms,split,sep,splice_site_thresh)
./splice_site_correct.R:  mat = strsplit(mid,split = sep,fixed = TRUE)
./splice_site_correct.R:  mat = strsplit(mid,split = sep,fixed = TRUE)
./splice_site_correct.R:  from_table = do.call(rbind,strsplit(from,split = ","))
./splice_site_correct.R:  to_table = do.call(rbind,strsplit(to,split = ","))
./splice_site_correct.R:      from_vec = suppressWarnings(as.numeric(unlist(strsplit(from[i],split = sep,fixed = TRUE))))
./splice_site_correct.R:      to_vec = suppressWarnings(as.numeric(unlist(strsplit(to[i],split = sep,fixed = TRUE))))
./splice_site_correct.R:  to_table = do.call(rbind,strsplit(correct_iso,split = ","))
./splice_site_correct.R:#' @param split The character to seperate each exon bin in the isoform representation
./splice_site_correct.R:site_recover <- function(start,end,mid = NULL,sites = NULL,sep = ",",split = "|"){
./splice_site_correct.R:      mid = suppressWarnings(as.logical(as.numeric(unlist(strsplit(mid,split = ",")))))
./splice_site_correct.R:      splice_sites = paste(splice_sites,collapse = split)
./transcript_impute.R:#' @param sep The character to split the start and end position for each exon in the isoform.
./transcript_impute.R:#' @param split The character to split the exons in the isoform
./transcript_impute.R:read2bins = function(read,sep = ",",split = "|"){
./transcript_impute.R:  sites = Longcellsrc::isoform2sites(read,split = split,sep = sep)
./transcript_impute.R:#' @param sep The character to split the start and end position for each exon in the isoform.
./transcript_impute.R:#' @param split The character to split the exons in the isoform
./transcript_impute.R:                       sep = ",",split = "|"){
./transcript_impute.R:    bins = read2bins(x,sep,split)
./transcript_impute.R:                      sep = ",",split = "|"){
./transcript_impute.R:                                !!sym(gtf_end_col),sep = sep),collapse = split))
./transcript_impute.R:                                           thresh,overlap_thresh,end_bias,split,sep)
./transcript_impute.R:                            split = "|",sep = ","){
./transcript_impute.R:                                sep,split)
./transcript_impute.R:                           sep = sep,split = split)
./umi_cluster.R:#' @param split The character to split each exon in the isoform representation
./umi_cluster.R:                              iso_thresh = 200,split = "|",sep = ","){
./umi_cluster.R:                           sim_thresh,iso_thresh,split,sep);
./umi_cluster.R:#' split as sub-graphs and stores in a list.
./umi_count_functions.R:#' @param split The character to seperate different exons in the isoform representation.
./umi_count_functions.R:                            split = "|",sep = ",",
./umi_count_functions.R:                                   split,sep,splice_site_thresh)
./umi_count_functions.R:#' @param split The character to seperate different exons in the isoform representation.
./umi_count_functions.R:                      sim_thresh = NULL,split = "|",sep = ",",
./umi_count_functions.R:                                   split = split,sep = sep,
./umi_count_functions.R:                      sim_thresh = NULL, split = "|",sep = ",",
./umi_count_functions.R:                                       split = split,sep = sep,
