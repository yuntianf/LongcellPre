#' @importFrom tidyr pivot_wider
#' @importFrom magrittr %>%
long2wide = function(long,row_names_from,col_names_from,values_from,symmetric = TRUE){
  long = long[,c(row_names_from,col_names_from,values_from)]
  if(symmetric){
    rlong = long[,c(col_names_from,row_names_from,values_from)]
    colnames(rlong) = c(row_names_from,col_names_from,values_from)
    long = rbind(long,rlong)
    long = long[!duplicated(long),]
  }
  out = tidyr::pivot_wider(long,names_from = col_names_from,values_from = values_from)

  out = as.data.frame(out)
  rownames(out) = out[,row_names_from]
  out = out %>% dplyr::select(-any_of(row_names_from))
  if(symmetric){
    out = out[rownames(out),rownames(out)]
  }

  return(out)
}


long_symmetry = function(long,row_names_from, col_names_from){
  long = as.data.frame(long)
  side = setdiff(colnames(long),c(row_names_from, col_names_from))
  long = long[, c(row_names_from, col_names_from,side)]

  rlong = long[,c(col_names_from,row_names_from,side)]
  colnames(rlong)[1:2] = c(row_names_from,col_names_from)
  long = rbind(long,rlong)
  long = long[!duplicated(long),]
  long = long %>% arrange_at(c(row_names_from,col_names_from))

  return(long)
}


#' @title long2square
#'
#' @description Transform long table to a square matrix
#' @details This function is similar to long2wide but specifically for generating distance matrix.
#'
#' @inheritParams long2wide
#' @param na.fill The default value to fill NA.
#' @param nodes A preset of the rownames and colnames for the square matrix.
#' @importFrom tidyr pivot_wider
#' @return A square matrix with rownames and colnames
#'
long2square = function(long, row_names_from, col_names_from, values_from,
                       symmetric = TRUE,na.fill = NA,nodes = NULL){
  long = as.data.frame(long)
  long = long[, c(row_names_from, col_names_from, values_from)]
  if (symmetric) {
    long = long_symmetry(long,row_names_from, col_names_from)
  }
  if(is.null(nodes)){
    nodes = unique(unlist(long[,row_names_from],long[,col_names_from]))
  }

  mat = as.data.frame(tidyr::pivot_wider(long,
                                         names_from = col_names_from,
                                         values_from = values_from))
  rownames(mat) = mat[, row_names_from]
  mat = mat[,-which(colnames(mat)==row_names_from)]
  # return(mat)
  nodes = as.character(sort(nodes))
  diff = as.character(setdiff(nodes,colnames(mat)))
  if(length(diff) > 0){
    mat[,diff] = NA
  }

  mat = mat[nodes,nodes]
  rownames(mat) = colnames(mat) = nodes

  mat[is.na(mat)] = na.fill
  mat = as.matrix(mat)

  return(mat)
}

long2sparse = function(long, row_names_from, col_names_from, values_from,symmetric = FALSE){
  long = as.data.frame(long[, c(row_names_from, col_names_from, values_from)])

  if(symmetric){
    long = long_symmetry(long,row_names_from, col_names_from)
  }

  unique_rows <- unique(long[,row_names_from])
  unique_cols <- unique(long[,col_names_from])

  row_index <- match(long[,row_names_from], unique_rows)
  col_index <- match(long[,col_names_from], unique_cols)

  dgCmat <- sparseMatrix(i = row_index, j = col_index, x = long[,values_from])
  rownames(dgCmat) = unique_rows
  colnames(dgCmat) = unique_cols
  dgCmat = dgCmat[order((unique_rows)),order((unique_cols))]
  return(dgCmat)
}


wide2long = function(mat){
  colnames(mat) = 1:ncol(mat)
  mat = as.data.frame(mat)
  mat$i = 1:nrow(mat)

  long = tidyr::pivot_longer(mat,cols = 1:(ncol(mat)-1),names_to = "j")
  long = as.data.frame(long) %>% mutate(i = as.numeric(i),j = as.numeric(j))
  return(long)
}

link2cluster = function(link,nodes){
  link$flag = 1
  self = as.data.frame(cbind(nodes,nodes,rep(1,length(nodes))))

  colnames(link) = colnames(self) = c("i","j","flag")
  link = rbind(link,self) %>% arrange(i,j)
  link_mat = long2wide(long = link,row_names_from = "i",
                       col_names_from = "j",values_from = "flag",symmetric = TRUE)
  link_mat[is.na(link_mat)] = 0
  link_mat = 1-as.matrix(link_mat) %^% 20

  cluster = dbscan(as.dist(link_mat),eps = 0,minPts = 1)
  return(cluster$cluster)
}

mnn_dist = function(dis,k){
  knn = kNN(as.dist(dis),k)

  id = cbind(rep(1:nrow(knn$id),times = k),c(knn$id))
  rid = id[,c(2,1)]

  id = as.data.frame(id)
  rid = as.data.frame(rid)
  colnames(id) = colnames(rid) = c("i","j")

  mnn = inner_join(id,rid,by = c("i","j")) %>% filter(i < j)
  return(mnn)
}

nearest_knn = function(dis,k,top = 3){
  knn = kNN(as.dist(dis),k)

  id = cbind(rep(1:nrow(knn$id),times = k),c(knn$id))
  id_dis = as.data.frame(cbind(id,c(knn$dis)))

  colnames(id_dis) = c("i","j","dis")
  id_dis = id_dis %>% arrange(dis,i,j)
  id_dis = id_dis[!duplicated(data.frame(t(apply(id_dis[,c("i","j")], 1, sort)))),]

  return(id_dis[1:min(top,nrow(id_dis)),])
}

cluster_merge = function(input_list,cluster){
  if(length(input_list) != length(cluster)){
    stop("The length of the list and the cluster identity don't match!")
  }
  else{
    out = lapply(unique(cluster),function(i){
      return(unlist(input_list[cluster == i]))
    })
    return(out)
  }
}

combn_dedup = function(combn){
  flag = as.data.frame(t(apply(combn, 1, sort)))
  flag = do.call(paste, c(flag, sep = ","))

  return(!duplicated(flag))
  combn = combn[!duplicated(flag),]
  return(combn)
}

dismat_mst = function(mat){
  long = wide2long(mat)
  colnames(long) = c("from","to","weight")
  long = long %>% filter(from != to)

  graph = simplify(graph_from_data_frame(long,directed = FALSE))

  seed_mst = mst(graph)
  seed_mst_edge = as_long_data_frame(seed_mst) %>% dplyr::select(from,to,weight)
  seed_mst_edge = seed_mst_edge %>% mutate(from = names(V(seed_mst))[from],to = names(V(seed_mst))[to])
  seed_mst_edge = seed_mst_edge %>% mutate(from = as.numeric(from),to = as.numeric(to))

  return(seed_mst_edge)
}

dis_point_to_edge <- function(point, edge_start, edge_end) {

  # Convert inputs to matrices for vectorized operations
  P <- as.matrix(point)
  A <- as.matrix(edge_start)
  B <- as.matrix(edge_end)

  # Vector from A to B (the edge direction)
  AB <- B - A

  # Vector from A to the point P
  AP <- P - A

  # Project vector AP onto AB, and normalize by the length of AB squared
  t <- sum(AP * AB) / sum(AB * AB)

  # Restrict t to [0, 1] to stay within the segment
  t <- pmax(0, pmin(1, t))

  # Find the closest point on the edge to the point P
  closest_point <- A + t * AB

  # Compute the distance between the point and the closest point on the edge
  distance <- sqrt(sum((P - closest_point)^2))

  return(c(distance,t))
}

dis_points_to_edges <- function(points,edges){
  dis = lapply(edges,function(x){
    edge_start = unlist(x[1,])
    edge_end = unlist(x[2,])
    sub = lapply(1:nrow(points),function(y){
      coord = unlist(points[y,])
      out = dis_point_to_edge(coord,edge_start,edge_end)
      return(out)
    })
    sub = do.call(rbind,sub)
    return(sub)
  })
  dis = do.call(cbind,dis)

  map = dis[,seq(1,ncol(dis),2)]
  dis = dis[,seq(2,ncol(dis),2)]

  out = list("map" = map,"dis" = dis)
  return(out)
}


knn_between_groups = function(distance,k){
  distance = as.matrix(distance)
  nn = lapply(1:nrow(distance),function(i){
    x = distance[i,]

    x_rank = rank(x,ties.method = "min")
    sub_id = which(x_rank %in% 1:k)
    sub_id = sub_id[order(x[sub_id])]

    sub_dis = x[sub_id]
    return(cbind(i,sub_id,sub_dis))
  })
  nn = as.data.frame(do.call(rbind,nn))
  colnames(nn) = c("group1","group2","dist")
  rownames(nn) = NULL
  return(nn)
}

find_mutual_nn = function(distance,k,dis_thresh = NULL){
  group1_flat = knn_between_groups(distance,k)
  group2_flat = knn_between_groups(t(distance),k)

  colnames(group2_flat) = c("group2","group1","dist")
  group2_flat = group2_flat[,c("group1","group2","dist")]

  #return(list(group1_flat,group2_flat))
  mnn = as.data.frame(inner_join(group1_flat,group2_flat,by = c("group1","group2","dist")))
  if(!is.null(dis_thresh)){
    mnn = mnn %>% filter(dist < dis_thresh)
  }
  return(mnn)
}
