library(dbscan)
library(igraph)
library(umap)


leiden_embedding = function(data,k = 30,prune.snn = 1/15,weight = "jaccard",resolution = 1){
  snn = sNN(data,k = k)
  snn$jaccard = snn$shared/(2*k-snn$shared)

  snn_edge = as.data.frame(cbind(rep(1:nrow(data),each = k),c(t(snn$id)),
                                     c(t(snn$dis)),c(t(snn$jaccard))))
  colnames(snn_edge) = c("start","end","dis","jaccard")
  snn_edge = snn_edge %>% filter(jaccard > prune.snn)

  colnames(snn_edge)[which(colnames(snn_edge) == weight)] = "weight"
  snn_graph = graph_from_data_frame(snn_edge,directed = FALSE,vertices = 1:nrow(data))

  # cluster = cluster_leiden(dis_snn_graph,resolution = resolution)
  # cluster = cluster_louvain(dis_snn_graph,resolution = resolution)
  cluster = leiden::leiden(snn_graph,resolution_parameter = resolution)

  # return(as.factor(cluster$membership))
  return(as.factor(cluster))
}

leiden_dis = function(dismat,k = 10,prune.snn = 1/15,weight = "jaccard",resolution = 1,if_umap = TRUE){
    dis_snn = sNN(as.dist(dismat),k = k)
    dis_snn$jaccard = dis_snn$shared/(2*k-dis_snn$shared)

    dis_snn_edge = as.data.frame(cbind(rep(1:nrow(dismat),each = k),c(t(dis_snn$id)),
                           c(t(dis_snn$dis)),c(t(dis_snn$jaccard))))
    colnames(dis_snn_edge) = c("start","end","dis","jaccard")
    dis_snn_edge = dis_snn_edge %>% filter(jaccard > prune.snn)

    colnames(dis_snn_edge)[which(colnames(dis_snn_edge) == weight)] = "weight"
    dis_snn_graph = graph_from_data_frame(dis_snn_edge,directed = FALSE,vertices = 1:nrow(dismat))

    # cluster = cluster_leiden(dis_snn_graph,resolution = resolution)
    # cluster = cluster_louvain(dis_snn_graph,resolution = resolution)
    cluster = leiden(dis_snn_graph,resolution_parameter = resolution)

    if(if_umap){
        group_umap = umap(dismat,input="dist")
        group_umap = as.data.frame(group_umap$layout)
        colnames(group_umap) = c("umap1","umap2")
        # group_umap$cluster = as.factor(cluster$membership)
        group_umap$cluster = as.factor(cluster)
        return(group_umap)
    }

    # return(as.factor(cluster$membership))
    return(as.factor(cluster))
}


clonotype_iter_cluster = function(distance,groups_id,alpha = 0.05,iter = 100){
  cluster = list()
  while(length(groups_id) > 1){
    groups_n = sapply(groups_id,function(x) length(x))
    groups_id = groups_id[order(groups_n,decreasing = TRUE)]

    group1_id = groups_id[[1]]
    group1_emssion = sapply(2:length(groups_id),function(i){
      group2_id = groups_id[[i]]
      prob = group_2_prob(distance = distance,
                          group1_id = group1_id,
                          group2_id = group2_id,
                          iter = iter)
      return(prob)
    })
    print(group1_emssion)
    if(sum(group1_emssion > alpha) > 0){
      merge_id = which(group1_emssion > alpha)+1
      groups_id[[1]] = c(groups_id[[1]],unlist(groups_id[merge_id]))
      groups_id = groups_id[-merge_id]
    }
    else{
      cluster = c(cluster,groups_id[1])
      groups_id = groups_id[-1]
    }
  }
  cluster = c(cluster,groups_id[1])
  return(cluster)
}

seeds_sample = function(distance,size,nseed = 50,alpha = 1/2){
  if(nrow(distance) != ncol(distance)){
    stop("The distance matrix should be a square matrix!")
  }
  if(nrow(distance) != length(size)){
    stop("The dimension of distance matrix and the length of size don't match!")
  }
  if(nseed > length(size)){
    warning("The number of samples is larger than the number of total points, will return all points!")
    return(1:nrow(distance))
  }

  # dis_element = distance[upper.tri(distance)]
  rownames(distance) = colnames(distance) = 1:nrow(distance)

  start = which(size == max(size))[1]
  pool = c(start)
  while(length(pool) < nseed){
    dis = as.matrix(distance[pool,setdiff(1:ncol(distance),pool),drop = FALSE])
    dis = colMins(dis,useNames = TRUE)
    sub_size = size[setdiff(1:ncol(distance),pool)]

    weight = sapply(1:length(sub_size),function(i){
      dis_i = dis[i]
      size_i = sub_size[i]

      qdis = sum(dis_i>dis)/length(dis)
      qsize = sum(size_i > size)/length(size)

      return(alpha*qdis + qsize*(1-alpha))
    })

    id = as.numeric(names(dis)[which(weight == max(weight))[1]])
    pool = c(pool,id)
  }
  return(pool)
}


#' @importFrom dplyr group_by summarise
seeds_init = function(groups_dis,groups,nseed = 50){
  names(groups) = 1:length(groups)
  groups_n = sapply(groups,function(x) length(x))

  seeds_id = seeds_sample(groups_dis,groups_n,nseed)
  nonseeds_id = setdiff(1:length(groups),seeds_id)
  seeds = groups[seeds_id]
  nonseeds = groups[nonseeds_id]
  name = names(groups)

  nonseeds_seeds_dis = groups_dis[nonseeds_id,seeds_id,drop = FALSE]
  nonseed_attr = apply(nonseeds_seeds_dis,1,function(x){
    seeds_id[which(x == min(x))[1]]
  })

  seeds = lapply(1:length(seeds),function(i){
    if(sum(nonseed_attr == i) > 0){
      seeds[[i]] = c(seeds[[i]],unlist(nonseeds[nonseed_attr == i]))
    }
    return(seeds[[i]])
  })

  out = as.data.frame(cbind(nonseeds_id,nonseed_attr))
  colnames(out) = c("TCR","seed")
  self = as.data.frame(cbind(seeds_id,seeds_id))
  colnames(self) = c("TCR","seed")

  out = rbind(out,self) %>% mutate(TCR = as.numeric(name[TCR]))

  out = out %>% group_by(seed) %>% summarise(TCR = list(TCR)) %>%
        arrange(seed) %>% mutate(cell = seeds) %>% mutate(seed = as.numeric(name[seed]))

  return(out)
}

clonotype_seed_cluster = function(distance,dm,groups,nseed = 50,maxit = NULL){
  if(length(groups) != nrow(dm)){
    stop("The size of groups and group embedding don't match!")
  }
  if(is.null(maxit) || maxit > nseed){
    maxit = nseed
  }

  groups_disance = groups_dis(distance,group1s = groups)
  seeds = seeds_init(groups_disance,groups,nseed)
  seeds_cell = seeds$cell
  seeds_TCR = seeds$TCR
  seeds_dis = groups_dis(distance,group1s = seeds_cell)

  loss_record = c()
  #cell_record = list()
  TCR_record = list()

  for(i in 1:maxit){
    print(i)
    loss = mutli_prcrv_loss(dm,seeds_TCR)

    loss_record = c(loss_record,loss)
    #cell_record = c(cell_record,list(seeds_cell))
    TCR_record = c(TCR_record,list(seeds_TCR))

    if(length(seeds_TCR) == 1){
      break
    }

    nn = nearest_knn(seeds_dis,k = 1,top = 3)
    candidate = lapply(1:nrow(nn),function(i){
      id = unlist(nn[i,c("i","j")])
      return(unlist(seeds_TCR[id]))
    })

    nn$prcrv = sapply(1:nrow(nn),function(i){
      group1 = nn[i,"i"]
      group2 = nn[i,"j"]
      dis = prcrv_dis(dm,seeds_TCR[[group1]],seeds_TCR[[group2]],size_thresh = 10)
    })
    nn = nn %>% arrange(prcrv) %>% dplyr::select(i,j)

    seeds_cluster = link2cluster(nn[1,],nodes = 1:length(seeds_TCR))

    seeds_cell = cluster_merge(seeds_cell,seeds_cluster)
    seeds_TCR = cluster_merge(seeds_TCR,seeds_cluster)

    seeds_cluster = lapply(unique(seeds_cluster),function(x){
      return(which(seeds_cluster == x))
    })
    seeds_dis = update_group_dis(mat = seeds_dis,distance = distance,
                                 groups = seeds_cluster,contents = seeds_cell)
  }
  return(list(loss_record,TCR_record))
}

clonotype_kmeans_cluster = function(dis,dm,k){
  if(nrow(dis) != nrow(dm)){
    stop("The size of distance and embedding don't match!")
  }

  cluster = list(1:nrow(dm))
  ot_loss = mutli_prcrv_loss(dm,cluster)
  nn_loss = mean(upper.tri(dis))
  start = list(cluster,ot_loss,nn_loss)

  record = lapply(2:k,function(i){
    cluster = suppressMessages({FCPS::kmeansClustering(as.matrix(dis),ClusterNo = i,
                                     RandomNo = 10)})$Cls
    cluster = as.data.frame(cbind(1:length(cluster),cluster))
    colnames(cluster) = c("id","cls")
    cluster = cluster %>% group_by(cls) %>% summarise(id = list(id))

    ot_loss = mutli_prcrv_loss(dm,cluster$id)

    group_dis = as.matrix(dis_collapse(dis,cluster$id))
    nn_loss = mean(diag(group_dis)) - mean(group_dis[upper.tri(group_dis)])

    return(list(cluster,ot_loss,nn_loss))
  })

  record = c(start,record)
  return(record)
}

clonotype_mst = function(distance,dm,groups,nseed = 30, k = 5){
  if(length(groups) != nrow(dm)){
    stop("The size of groups and group embedding don't match!")
  }

  groups_disance = groups_dis(distance,group1s = groups)

  seeds_cluster = GMM(groups_disance,n_components = as.integer(nseed))
  seeds_cluster = lapply(unique(seeds_cluster),function(x){
    return(which(seeds_cluster == x))
  })
  seeds_cell = groups
  seeds_dis = update_group_dis(mat = groups_disance,distance = distance,
                               groups = seeds_cluster,contents = seeds_cell)

  seeds_knn = dbscan::kNN(as.dist(seeds_dis),k = k)

}
